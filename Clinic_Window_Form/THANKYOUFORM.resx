<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        FnzG0NDwfxpmTPSvOBS7AAAAAElFTkSuQmCC
</value>
  </data>
</root>